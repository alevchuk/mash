#!/usr/bin/env Rscript

library(rjson)

apply.template <- function(msa_window_html=msa_window_html,
                           inline_css=inline_css,
                           title=title,
                           menu=menu) {

        lines <- readLines(
          paste(software.dir, "/html/template.html", sep=""))

        lines <- lapply(lines, function(l){sub("%%CSS%%", inline_css, l)})
        lines <- lapply(lines, function(l){sub("%%MSA%%", msa_window_html, l)})
        lines <- lapply(lines, function(l){sub("%%TITLE%%", title, l)})
        lines <- lapply(lines, function(l){sub("%%JSON_MENU_FILE%%", menu, l)})
        lines <- lapply(lines, function(l){sub("%%GEN_DATE%%", Sys.time(), l)})

        lines <- paste(lines, sep = "", collapse="\n")
        return(lines)
}






initial.options <- commandArgs()
file.arg.name <- "--file="

script.path <- sub(file.arg.name, "", 
  initial.options[grep(file.arg.name, initial.options)])

script.path.list <- strsplit(script.path, '/')[[1]]
script.dir.list  <- script.path.list[1:(length(script.path.list)-1)]

software.dir  <- paste(c(script.dir.list, '..'), sep='/', collapse='/')
script.name   <- script.path.list[[length(script.path.list)]]



script.args <- commandArgs(trailingOnly=T)

if(length(script.args) < 2) {
       cat(paste(
         paste("Usage:", script.name, "<webdata> <out.html>\n"),
         "Required Options",
         "  <webdata>      directory with files produced by the analyzer",
         "  <out.html>     output front page in HTML\n",
         "",
         sep="\n"))
       quit()
}

# TODO: Enforce that Webdata and out.html are in the same directory

dir.path.webdata  <- sub("/$", "", script.args[[1]])
dir.name.webdata  <- tail(strsplit(dir.path.webdata, "/")[[1]], 1)

name.msa          <- sub("_webdata", "", dir.name.webdata)

file.out     <- script.args[[2]]

file.msa     <- paste(dir.path.webdata, 'msa.json', sep='/')

if (length(grep('/', file.out)) > 0) {
  out_dir    <- strsplit(file.out, '/')[[1]]
  out_dir    <- paste(out_dir[1:(length(out_dir)-1)], sep='/')
} else {
  out_dir    <- "./"
}

msa <- fromJSON(readLines(file.msa))

dir.plugins  <- paste(software.dir, "plugins", sep='/')
plugins      <- dir(dir.plugins, pattern="*.coloring-scorer$")

nil_plugin   <- "nil.coloring-scorer"

if (!length(which(nil_plugin == plugins))) {
  first_plugin_path <-
    paste(
      dir.path.webdata, 
      paste(plugins[[1]], "html", sep="."), sep = "/", collapse="")
} else {
  first_plugin_path <-
    paste(
      dir.path.webdata, 
      paste(nil_plugin, "html", sep="."), sep = "/", collapse="")
}

html_chunk <- paste(readLines(first_plugin_path), collapse="\n")

# The Menu file is prodced by 020-configure-plugins
dir.path.menu <- paste(dir.path.webdata, "menu.json", sep = "/", collapse="")
dir.name.menu <- paste(dir.name.webdata, "menu.json", sep = "/", collapse="")


# Get CSS
css_files  = dir(full.names=T, pattern="*.css$",
                 paste(software.dir, "html", sep='/'))


title=sub(".fasta$", "", name.msa)
num_seqs = length(msa)
mean_seq_len = mean(sapply(msa, function(x){nchar(gsub("-", "", x))}))
mean_seq_len = sprintf("%.1f", mean_seq_len)

title=paste(title, paste("(", num_seqs, " &#x2a2f; ", mean_seq_len, ")", sep=""))

# Generate HTML Analysis Page
writeLines(apply.template(
  msa_window_html=html_chunk,
  inline_css=paste(unlist(lapply(css_files, readLines)), collapse="\n"),
  title=title,
  menu=dir.name.menu), file.out
)
