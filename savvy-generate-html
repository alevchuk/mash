#!/usr/bin/env Rscript

library(seqinr) # for read.fasta
library(rjson)


importFasta <- function(filename.fasta=filename.fasta) {
        fasta <- read.fasta(filename.fasta, seqtype = "AA")
        seqs_info <- data.frame(id=1:length(fasta), headers=names(fasta))
        msa <- sapply(fasta, function(i){as.character(i)})
        attributes(msa) <- list(dim=attr(msa, 'dim')) # All I need is dim
        return(list(seqs_info=seqs_info, msa=msa))
}

make_html_seqs <- function(seqs_info, msa){
       html_msa <- apply(msa, 1, function(r){paste("<b>", r, "</b>", sep="")})
       html_msa <- t(html_msa) # Transpose!
       lines    <- apply(html_msa, 2, function(i){paste(i, collapse="")})
       o        <- paste("<div class=\"s\" id=\"seq", seqs_info$id, "\">",
                         lines, "</div>", sep="")
       return(o)
}

applyTemplate <- function(html_seqs, title=title, menu=menu) {
        lines <- readLines(
          paste(script.dir, "/html/savvy.template.html", sep=""))

        lines <- lapply(lines, function(l){sub("%%SEQUENCES%%", html_seqs, l)})
        lines <- lapply(lines, function(l){sub("%%TITLE%%", title, l)})
        lines <- lapply(lines, function(l){sub("%%JSON_MENU_FILE%%", menu, l)})
        lines <- lapply(lines, function(l){sub("%%GEN_DATE%%", Sys.time(), l)})

        lines <- paste(lines, sep = "", collapse="\n")
        return(lines)
}



initial.options <- commandArgs()
file.arg.name <- "--file="

script.path <- sub(file.arg.name, "", 
  initial.options[grep(file.arg.name, initial.options)])

script.path.list <- strsplit(script.path, '/')[[1]]
script.dir.list  <- script.path.list[1:(length(script.path.list)-1)]

script.dir  <- paste(script.dir.list, sep='/', collapse='/')
script.name <- script.path.list[[length(script.path.list)]]



script.args <- commandArgs(trailingOnly=T)

if(length(script.args) < 2) {
       cat(paste(
         paste("Usage:", script.name, "<in.fasta> <out.html> [PLUGINS]\n"),
         "Required Options",
         "  <in.fasta>    multiple sequence alignment (msa) in FASTA",
         "  <out.html>    view of the msa in HTML\n",
         "PLUGINS",
         "  -p <plugin1>.savvy -p <plugin2>.savvy -p <plugin3>.savvy ...",
         "",
         sep="\n"))
       quit()
}

file.fasta <- script.args[[1]]
file.out   <- script.args[[2]]
plugins    <- sapply(which(script.args == "-p"), function(i){script.args[i+1]})

prefix     <- strsplit(file.fasta, '/')[[1]]
prefix     <- prefix[length(prefix)]

if (length(grep('/', file.out)) > 0) {
  out_dir    <- strsplit(file.out, '/')[[1]]
  out_dir    <- paste(out_dir[1:(length(out_dir)-1)], sep='/')
} else {
  out_dir    <- "./"
}

fasta <- importFasta(filename.fasta=file.fasta)

html_seqs  <- make_html_seqs(fasta$seqs_info, fasta$msa)
html_chunk <- paste(html_seqs, sep = "", collapse="\n")

# Build the name for the Menu file
m      <- paste(prefix, "_menu.json", sep = "", collapse="")
m_path <- paste(out_dir, m, sep="/")

# Generate the Menu file
pl <- lapply(plugins, function(i){
  paste(prefix, "_", i,".json", sep = "", collapse="")
})
writeLines(toJSON(list(type="menu", version="1", items=pl)), m_path)

# Generate HTML
writeLines(applyTemplate(html_chunk, title=file.fasta, menu=m), file.out)
